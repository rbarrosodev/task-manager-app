{"ast":null,"code":"import Vue from 'vue/dist/vue.esm.js';\n\nvar Api = require('./api');\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  var app = new Vue({\n    el: '#app',\n    components: {\n      'task': {\n        props: ['task'],\n        template: \"\\n                    <div class=\\\"ui segment task\\\" v-bind:class=\\\"task.completed ? 'done' : 'todo' \\\">\\n                        <div class=\\\"ui grid\\\">\\n                        <div class=\\\"left floated twelve wide column\\\">\\n                            <div class=\\\"ui checkbox\\\">\\n                            <input type=\\\"checkbox\\\" name=\\\"task\\\" v-on:click=\\\"$parent.toggleDone($event, task.id)\\\" :checked=\\\"task.completed\\\" >\\n                            <label>{{ task.name }} <span class=\\\"description\\\">{{ task.description }}</span></label>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"right floated three wide column\\\">\\n                            <i class=\\\"icon pencil blue\\\" alt=\\\"Edit\\\" v-on:click=\\\"$parent.editTask($event, task.id)\\\"></i>\\n                            <i class=\\\"icon trash red\\\" alt=\\\"Delete\\\" v-on:click=\\\"$parent.deleteTask($event, task.id)\\\"></i>\\n                        </div>\\n                        </div>\\n                    </div>\\n                    \"\n      }\n    },\n    data: {\n      tasks: [{\n        id: 1,\n        name: 'Todo 1',\n        description: 'This is a todo',\n        completed: false\n      }, {\n        id: 2,\n        name: 'Todo 2',\n        description: 'This is another todo',\n        completed: true\n      }, {\n        id: 3,\n        name: 'Three',\n        description: 'This is a compplete todo',\n        completed: true\n      }, {\n        id: 4,\n        name: 'Four',\n        description: 'This is another complete todo',\n        completed: true\n      }],\n      task: {},\n      message: '',\n      action: 'create'\n    },\n    computed: {\n      completedTasks: function completedTasks() {\n        return this.tasks.filter(function (item) {\n          return item.completed == true;\n        });\n      },\n      todoTasks: function todoTasks() {\n        return this.tasks.filter(function (item) {\n          return item.completed == false;\n        });\n      },\n      nextId: function nextId() {\n        return this.tasks.sort(function (a, b) {\n          return a.id - b.id;\n        })[this.tasks.length - 1].id + 1;\n      }\n    },\n    methods: {\n      clear: function clear() {\n        this.task = {};\n        this.action = 'create';\n        this.message = '';\n      },\n      toggleDone: function toggleDone(event, id) {\n        event.stopImmediatePropagation();\n        var task = this.tasks.find(function (item) {\n          return item.id == id;\n        });\n\n        if (task) {\n          task.completed = !task.completed;\n          this.message = \"Task \".concat(id, \" updated.\");\n        }\n      },\n      createTask: function createTask(event) {\n        if (!this.task.completed) {\n          this.task.completed = false;\n        } else {\n          this.task.completed = true;\n        }\n\n        var taskId = this.nextId;\n        this.task.id = taskId;\n        var newTask = Object.assign({}, this.task);\n        this.tasks.push(newTask);\n        this.clear();\n        this.message = \"Task \".concat(taskId, \" created.\");\n      },\n      updateTask: function updateTask(event, id) {\n        event.stopImmediatePropagation();\n        var task = this.tasks.find(function (item) {\n          return item.id == id;\n        });\n\n        if (task) {\n          task.name = this.task.name;\n          task.description = this.task.description;\n          task.completed = this.task.completed;\n          this.message = \"Task \".concat(id, \" updated.\");\n        }\n      },\n      editTask: function editTask(event, id) {\n        this.action = 'edit';\n        var task = this.tasks.find(function (item) {\n          return item.id == id;\n        });\n\n        if (task) {\n          this.task = {\n            id: id,\n            name: task.name,\n            description: task.description,\n            completed: task.completed\n          };\n        }\n      },\n      deleteTask: function deleteTask(event, id) {\n        event.stopImmediatePropagation();\n        var taskIndex = this.tasks.findIndex(function (item) {\n          return item.id == id;\n        });\n\n        if (taskIndex > -1) {\n          this.$delete(this.tasks, taskIndex);\n          this.message = \"Task \".concat(id, \" deleted.\");\n        }\n      }\n    }\n  });\n});","map":{"version":3,"sources":["/Users/direitoreal/task-manager-app/app/javascript/packs/app.js"],"names":["Vue","Api","require","document","addEventListener","app","el","components","props","template","data","tasks","id","name","description","completed","task","message","action","computed","completedTasks","filter","item","todoTasks","nextId","sort","a","b","length","methods","clear","toggleDone","event","stopImmediatePropagation","find","createTask","taskId","newTask","Object","assign","push","updateTask","editTask","deleteTask","taskIndex","findIndex","$delete"],"mappings":"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","sourcesContent":["import Vue from 'vue/dist/vue.esm.js';\n\nconst Api = require('./api');\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    var app = new Vue({\n        el: '#app',\n        components: {\n        'task': {\n            props: ['task'],\n            template: `\n                    <div class=\"ui segment task\" v-bind:class=\"task.completed ? 'done' : 'todo' \">\n                        <div class=\"ui grid\">\n                        <div class=\"left floated twelve wide column\">\n                            <div class=\"ui checkbox\">\n                            <input type=\"checkbox\" name=\"task\" v-on:click=\"$parent.toggleDone($event, task.id)\" :checked=\"task.completed\" >\n                            <label>{{ task.name }} <span class=\"description\">{{ task.description }}</span></label>\n                            </div>\n                        </div>\n                        <div class=\"right floated three wide column\">\n                            <i class=\"icon pencil blue\" alt=\"Edit\" v-on:click=\"$parent.editTask($event, task.id)\"></i>\n                            <i class=\"icon trash red\" alt=\"Delete\" v-on:click=\"$parent.deleteTask($event, task.id)\"></i>\n                        </div>\n                        </div>\n                    </div>\n                    `\n        }\n        },\n\n        data: {\n        tasks: [\n            { id: 1, name: 'Todo 1', description: 'This is a todo', completed: false },\n            { id: 2, name: 'Todo 2', description: 'This is another todo', completed: true },\n            { id: 3, name: 'Three', description: 'This is a compplete todo', completed: true },\n            { id: 4, name: 'Four', description: 'This is another complete todo', completed: true }\n        ],\n        task: {},\n        message: '',\n        action: 'create'\n        },\n\n        computed: {\n        completedTasks: function() {\n            return this.tasks.filter( item => item.completed == true );\n        },\n        todoTasks: function() {\n            return this.tasks.filter( item => item.completed == false);\n        },\n        nextId: function(){\n            return (this.tasks.sort(function(a,b){ return a.id - b.id; }))[this.tasks.length - 1].id + 1;\n        }\n        },\n\n        methods: {\n        clear: function(){\n            this.task = {};\n            this.action = 'create';\n            this.message = '';\n        },\n\n        toggleDone: function(event, id){\n            event.stopImmediatePropagation();\n\n            let task = this.tasks.find(item => item.id == id);\n            \n            if(task) {\n            task.completed = !task.completed;\n            this.message = `Task ${id} updated.`\n            }\n        },\n\n        createTask: function(event) {\n            if(!this.task.completed){\n            this.task.completed = false;\n            } else {\n            this.task.completed = true;\n            }\n\n            let taskId = this.nextId;\n\n            this.task.id = taskId;\n            let newTask = Object.assign({}, this.task);\n            this.tasks.push(newTask);\n            this.clear();\n            this.message = `Task ${taskId} created.`\n        },\n\n        updateTask: function(event, id){\n            event.stopImmediatePropagation();\n\n            let task = this.tasks.find(item => item.id == id);\n\n            if(task){\n            task.name = this.task.name;\n            task.description = this.task.description;\n            task.completed = this.task.completed;\n            this.message = `Task ${id} updated.`\n            }\n        },\n        \n        editTask: function(event, id){\n            this.action = 'edit';\n\n            let task = this.tasks.find(item => item.id == id);\n            if(task) {\n            this.task = { id: id,\n                            name: task.name,\n                            description: task.description,\n                            completed: task.completed };\n            }\n        },\n\n        deleteTask: function(event, id){\n            event.stopImmediatePropagation();\n\n            let taskIndex = this.tasks.findIndex(item => item.id == id);\n            if(taskIndex > -1){\n            this.$delete(this.tasks, taskIndex);\n            this.message = `Task ${id} deleted.`\n            }\n        }  \n        }\n    })\n})"]},"metadata":{},"sourceType":"module"}