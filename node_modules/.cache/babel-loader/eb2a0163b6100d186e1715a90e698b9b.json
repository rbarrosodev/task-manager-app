{"ast":null,"code":"import Vue from 'vue/dist/vue.esm.js';\n\nvar Api = require('./api');\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  var app = new Vue({\n    el: '#app',\n    components: {\n      'task': {\n        props: ['task'],\n        template: \"\\n                    <div class=\\\"ui segment task\\\" v-bind:class=\\\"task.completed ? 'done' : 'todo' \\\">\\n                        <div class=\\\"ui grid\\\">\\n                        <div class=\\\"left floated twelve wide column\\\">\\n                            <div class=\\\"ui checkbox\\\">\\n                            <input type=\\\"checkbox\\\" name=\\\"task\\\" v-on:click=\\\"$parent.toggleDone($event, task.id)\\\" :checked=\\\"task.completed\\\" >\\n                            <label>{{ task.name }} <span class=\\\"description\\\">{{ task.description }}</span></label>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"right floated three wide column\\\">\\n                            <i class=\\\"icon pencil blue\\\" alt=\\\"Edit\\\" v-on:click=\\\"$parent.editTask($event, task.id)\\\"></i>\\n                            <i class=\\\"icon trash red\\\" alt=\\\"Delete\\\" v-on:click=\\\"$parent.deleteTask($event, task.id)\\\"></i>\\n                        </div>\\n                        </div>\\n                    </div>\\n                    \"\n      }\n    },\n    data: {\n      tasks: [],\n      task: {},\n      message: '',\n      action: 'create'\n    },\n    computed: {\n      completedTasks: function completedTasks() {\n        return this.tasks.filter(function (item) {\n          return item.completed == true;\n        });\n      },\n      todoTasks: function todoTasks() {\n        return this.tasks.filter(function (item) {\n          return item.completed == false;\n        });\n      },\n      nextId: function nextId() {\n        return this.tasks.sort(function (a, b) {\n          return a.id - b.id;\n        })[this.tasks.length - 1].id + 1;\n      }\n    },\n    methods: {\n      listTasks: function listTasks() {\n        Api.listTasks().then(function (response) {\n          app.tasks = response;\n        });\n      },\n      clear: function clear() {\n        this.task = {};\n        this.action = 'create';\n        this.message = '';\n      },\n      toggleDone: function toggleDone(event, id) {\n        event.stopImmediatePropagation();\n        var task = this.tasks.find(function (item) {\n          return item.id == id;\n        });\n\n        if (task) {\n          task.completed = !task.completed;\n          this.message = \"Task \".concat(id, \" updated.\");\n        }\n      },\n      createTask: function createTask(event) {\n        if (!this.task.completed) {\n          this.task.completed = false;\n        } else {\n          this.task.completed = true;\n        }\n\n        Api.createTask(this.task).then(function (response) {\n          app.listTasks();\n          app.clear();\n          app.message = \"Task \".concat(response.id, \" created.\");\n        });\n      },\n      updateTask: function updateTask(event, id) {\n        event.stopImmediatePropagation();\n        var task = this.tasks.find(function (item) {\n          return item.id == id;\n        });\n\n        if (task) {\n          task.name = this.task.name;\n          task.description = this.task.description;\n          task.completed = this.task.completed;\n          this.message = \"Task \".concat(id, \" updated.\");\n        }\n      },\n      editTask: function editTask(event, id) {\n        this.action = 'edit';\n        var task = this.tasks.find(function (item) {\n          return item.id == id;\n        });\n\n        if (task) {\n          this.task = {\n            id: id,\n            name: task.name,\n            description: task.description,\n            completed: task.completed\n          };\n        }\n      },\n      deleteTask: function deleteTask(event, id) {\n        event.stopImmediatePropagation();\n        var taskIndex = this.tasks.findIndex(function (item) {\n          return item.id == id;\n        });\n\n        if (taskIndex > -1) {\n          this.$delete(this.tasks, taskIndex);\n          this.message = \"Task \".concat(id, \" deleted.\");\n        }\n      }\n    },\n    beforeMount: function beforeMount() {\n      this.listTasks();\n    }\n  });\n});","map":{"version":3,"sources":["/Users/direitoreal/task-manager-app/app/javascript/packs/app.js"],"names":["Vue","Api","require","document","addEventListener","app","el","components","props","template","data","tasks","task","message","action","computed","completedTasks","filter","item","completed","todoTasks","nextId","sort","a","b","id","length","methods","listTasks","then","response","clear","toggleDone","event","stopImmediatePropagation","find","createTask","updateTask","name","description","editTask","deleteTask","taskIndex","findIndex","$delete","beforeMount"],"mappings":"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","sourcesContent":["import Vue from 'vue/dist/vue.esm.js';\n\nconst Api = require('./api');\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    var app = new Vue({\n        el: '#app',\n        components: {\n        'task': {\n            props: ['task'],\n            template: `\n                    <div class=\"ui segment task\" v-bind:class=\"task.completed ? 'done' : 'todo' \">\n                        <div class=\"ui grid\">\n                        <div class=\"left floated twelve wide column\">\n                            <div class=\"ui checkbox\">\n                            <input type=\"checkbox\" name=\"task\" v-on:click=\"$parent.toggleDone($event, task.id)\" :checked=\"task.completed\" >\n                            <label>{{ task.name }} <span class=\"description\">{{ task.description }}</span></label>\n                            </div>\n                        </div>\n                        <div class=\"right floated three wide column\">\n                            <i class=\"icon pencil blue\" alt=\"Edit\" v-on:click=\"$parent.editTask($event, task.id)\"></i>\n                            <i class=\"icon trash red\" alt=\"Delete\" v-on:click=\"$parent.deleteTask($event, task.id)\"></i>\n                        </div>\n                        </div>\n                    </div>\n                    `\n        }\n        },\n\n        data: {\n        tasks: [],\n        task: {},\n        message: '',\n        action: 'create'\n        },\n\n        computed: {\n        completedTasks: function() {\n            return this.tasks.filter( item => item.completed == true );\n        },\n        todoTasks: function() {\n            return this.tasks.filter( item => item.completed == false);\n        },\n        nextId: function(){\n            return (this.tasks.sort(function(a,b){ return a.id - b.id; }))[this.tasks.length - 1].id + 1;\n        }\n        },\n\n        methods: {\n          listTasks: function() {\n            Api.listTasks().then(function(response) {\n              app.tasks = response;\n            })\n          },\n\n          clear: function(){\n              this.task = {};\n              this.action = 'create';\n              this.message = '';\n          },\n\n          toggleDone: function(event, id){\n              event.stopImmediatePropagation();\n\n              let task = this.tasks.find(item => item.id == id);\n              \n              if(task) {\n              task.completed = !task.completed;\n              this.message = `Task ${id} updated.`\n              }\n          },\n\n          createTask: function(event) {\n            if(!this.task.completed){\n              this.task.completed = false;\n            } else {\n              this.task.completed = true;\n            }\n            Api.createTask(this.task).then(function(response){\n              app.listTasks();\n              app.clear();\n              app.message = `Task ${response.id} created.`\n            })\n          },\n\n          updateTask: function(event, id){\n              event.stopImmediatePropagation();\n\n              let task = this.tasks.find(item => item.id == id);\n\n              if(task){\n              task.name = this.task.name;\n              task.description = this.task.description;\n              task.completed = this.task.completed;\n              this.message = `Task ${id} updated.`\n              }\n          },\n          \n          editTask: function(event, id){\n              this.action = 'edit';\n\n              let task = this.tasks.find(item => item.id == id);\n              if(task) {\n              this.task = { id: id,\n                              name: task.name,\n                              description: task.description,\n                              completed: task.completed };\n              }\n          },\n\n          deleteTask: function(event, id){\n              event.stopImmediatePropagation();\n\n              let taskIndex = this.tasks.findIndex(item => item.id == id);\n              if(taskIndex > -1){\n              this.$delete(this.tasks, taskIndex);\n              this.message = `Task ${id} deleted.`\n              }\n          }  \n        },\n\n        beforeMount() { this.listTasks() }\n    })\n})"]},"metadata":{},"sourceType":"module"}